// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComLogRpcClient is the client API for ComLogRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComLogRpcClient interface {
	Append(ctx context.Context, in *Record, opts ...grpc.CallOption) (*AppendRecordResp, error)
	Read(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*ReadRecordResp, error)
}

type comLogRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewComLogRpcClient(cc grpc.ClientConnInterface) ComLogRpcClient {
	return &comLogRpcClient{cc}
}

func (c *comLogRpcClient) Append(ctx context.Context, in *Record, opts ...grpc.CallOption) (*AppendRecordResp, error) {
	out := new(AppendRecordResp)
	err := c.cc.Invoke(ctx, "/api.ComLogRpc/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comLogRpcClient) Read(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*ReadRecordResp, error) {
	out := new(ReadRecordResp)
	err := c.cc.Invoke(ctx, "/api.ComLogRpc/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComLogRpcServer is the server API for ComLogRpc service.
// All implementations must embed UnimplementedComLogRpcServer
// for forward compatibility
type ComLogRpcServer interface {
	Append(context.Context, *Record) (*AppendRecordResp, error)
	Read(context.Context, *Offset) (*ReadRecordResp, error)
	mustEmbedUnimplementedComLogRpcServer()
}

// UnimplementedComLogRpcServer must be embedded to have forward compatible implementations.
type UnimplementedComLogRpcServer struct {
}

func (UnimplementedComLogRpcServer) Append(context.Context, *Record) (*AppendRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedComLogRpcServer) Read(context.Context, *Offset) (*ReadRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedComLogRpcServer) mustEmbedUnimplementedComLogRpcServer() {}

// UnsafeComLogRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComLogRpcServer will
// result in compilation errors.
type UnsafeComLogRpcServer interface {
	mustEmbedUnimplementedComLogRpcServer()
}

func RegisterComLogRpcServer(s grpc.ServiceRegistrar, srv ComLogRpcServer) {
	s.RegisterService(&ComLogRpc_ServiceDesc, srv)
}

func _ComLogRpc_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComLogRpcServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ComLogRpc/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComLogRpcServer).Append(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComLogRpc_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComLogRpcServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ComLogRpc/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComLogRpcServer).Read(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

// ComLogRpc_ServiceDesc is the grpc.ServiceDesc for ComLogRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComLogRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ComLogRpc",
	HandlerType: (*ComLogRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _ComLogRpc_Append_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ComLogRpc_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
